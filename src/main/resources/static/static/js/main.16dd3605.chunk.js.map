{
  "version": 3,
  "sources": [
    "api/method.api.tsx",
    "components/AutoTransferInput.tsx",
    "forms/PostMixForm.tsx",
    "components/Mixer.tsx",
    "components/TransactionTable.tsx",
    "forms/GetAddressInfoForm.tsx",
    "forms/GetAllTransactionsForm.tsx",
    "forms/PostTransactionForm.tsx",
    "components/Jobcoin.tsx",
    "App.tsx",
    "serviceWorker.ts",
    "index.tsx"
  ],
  "names": [
    "Notify",
    "response",
    "successMessage",
    "status",
    "message",
    "success",
    "toDisplay",
    "data",
    "error",
    "errorData",
    "Object",
    "keys",
    "flatMap",
    "key",
    "errors",
    "Array",
    "of",
    "join",
    "notification",
    "warning",
    "statusText",
    "description",
    "Get",
    "path",
    "Promise",
    "resolve",
    "reject",
    "axios",
    "get",
    "headers",
    "ApiHeader",
    "then",
    "catch",
    "Post",
    "post",
    "AutoTransferInput",
    "onChangeFromAddress",
    "e",
    "fromAddress",
    "target",
    "value",
    "setState",
    "this",
    "canSubmit",
    "state",
    "Countdown",
    "title",
    "props",
    "deadline",
    "onFinish",
    "countdownFinished",
    "color",
    "amount",
    "depositAddress",
    "trigger",
    "placement",
    "allowAutoTransfer",
    "style",
    "width",
    "display",
    "size",
    "onChange",
    "placeholder",
    "type",
    "disabled",
    "length",
    "onClick",
    "handleAutoTransfer",
    "fundsTransferred",
    "React",
    "Component",
    "id",
    "PostMixForm",
    "restart",
    "buttonClicked",
    "step",
    "stepStatus",
    "remove",
    "k",
    "form",
    "getFieldValue",
    "setFieldsValue",
    "filter",
    "add",
    "nextKeys",
    "concat",
    "fundTransferred",
    "payload",
    "toAddress",
    "mixResponse",
    "mixAmount",
    "resetFields",
    "reason",
    "axiosResponse",
    "console",
    "log",
    "handleSubmit",
    "preventDefault",
    "validateFields",
    "err",
    "values",
    "names",
    "destinations",
    "map",
    "Date",
    "now",
    "getFieldDecorator",
    "formItemLayout",
    "labelCol",
    "xs",
    "span",
    "sm",
    "wrapperCol",
    "formItemLayoutWithOutLabel",
    "offset",
    "initialValue",
    "formItems",
    "index",
    "Item",
    "label",
    "required",
    "validateTrigger",
    "rules",
    "whitespace",
    "marginRight",
    "className",
    "onSubmit",
    "min",
    "htmlType",
    "current",
    "direction",
    "Step",
    "WrappedPostMixForm",
    "Form",
    "create",
    "name",
    "Mixer",
    "subTitle",
    "tags",
    "highlight",
    "match",
    "text",
    "TransactionTable",
    "highlightName",
    "columns",
    "dataIndex",
    "render",
    "address",
    "timestamp",
    "bordered",
    "dataSource",
    "pagination",
    "pageSize",
    "GetAddressInfoForm",
    "addressInfo",
    "fieldsError",
    "getFieldsError",
    "getFieldError",
    "addressError",
    "isFieldTouched",
    "layout",
    "validateStatus",
    "help",
    "prefix",
    "some",
    "field",
    "gutter",
    "balance",
    "precision",
    "theme",
    "transactions",
    "defaultActiveKey",
    "Panel",
    "header",
    "WrappedGetAddressInfoForm",
    "GetAllTransactionsForm",
    "WrappedGetAllTransactionsForm",
    "PostTransactionForm",
    "fromError",
    "toError",
    "amountError",
    "WrappedPostTransactionForm",
    "TabPane",
    "Tabs",
    "Jobcoin",
    "activePane",
    "tab",
    "App",
    "Header",
    "zIndex",
    "mode",
    "defaultSelectedKeys",
    "lineHeight",
    "Content",
    "padding",
    "Footer",
    "textAlign",
    "Boolean",
    "window",
    "location",
    "hostname",
    "ReactDOM",
    "document",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "registration",
    "unregister"
  ],
  "mappings": "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",
  "file": "static/js/main.16dd3605.chunk.js",
  "sourcesContent": [
    "import axios, {AxiosError, AxiosResponse} from 'axios';\nimport {message, notification, Tag} from \"antd/es\";\nimport * as React from \"react\";\n\nexport const Notify = (response: AxiosResponse, successMessage?: string) => {\n    if (response.status === 200) {\n        message.success(successMessage || \"Operation Success\");\n    } else {\n        let toDisplay = null;\n\n        if (typeof response.data.error === \"string\") {\n            toDisplay = response.data.error;\n        } else {\n            const errorData = response.data.error;\n            toDisplay = Object.keys(errorData).flatMap((key) => {\n                const errors = Array.of(errorData[key]).join(\", \");\n                return (<div><Tag>{key}</Tag> {errors}</div>)\n            });\n        }\n\n        if (response.status === 422) {\n            notification.warning({\n                message: response.statusText + \" \" + response.status,\n                description: toDisplay\n            });\n        } else {\n            notification.error({\n                message: response.statusText + \" \" + response.status,\n                description: toDisplay\n            });\n        }\n    }\n\n};\n\nexport const Get = (path: string) => {\n    return new Promise((resolve, reject) => {\n        axios.get(`${path}`, {\n            headers: ApiHeader\n        })\n            .then((response: AxiosResponse) => resolve(response))\n            .catch((error: AxiosError) => reject(error));\n    });\n};\n\nexport const Post = (path: string, data: any) => {\n    return new Promise((resolve, reject) => {\n        axios.post(`${path}`, data, {\n            headers: ApiHeader\n        })\n            .then((response: AxiosResponse) => resolve(response))\n            .catch((error: AxiosError) => reject(error));\n    });\n};\n\nexport const ApiHeader = {\n    headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n    },\n};",
    "import Tooltip from \"antd/es/tooltip\";\nimport Input from \"antd/es/input\";\nimport React, {Fragment} from \"react\";\nimport Countdown from \"antd/es/statistic/Countdown\";\nimport Tag from \"antd/es/tag\";\nimport {Button} from \"antd\";\nimport Icon from \"antd/es/icon\";\n\ntype Props = {\n    depositAddress: string;\n    amount: number;\n    countdownFinished: () => void;\n    handleAutoTransfer: Function;\n    fundsTransferred: () => void;\n    deadline: number;\n    allowAutoTransfer: boolean;\n}\n\ntype State = {\n    fromAddress: string;\n    canSubmit: boolean;\n}\n\nexport class AutoTransferInput extends React.Component<Props, State> {\n    componentDidMount() {\n        this.setState({\n            fromAddress: \"\",\n            canSubmit: false\n        })\n    }\n\n    onChangeFromAddress = (e: any) => {\n        const fromAddress = e.target.value;\n        this.setState({\n            fromAddress\n        })\n    };\n\n    render() {\n        return (this.state && (\n            <Fragment>\n                <Countdown\n                    title=\"\"\n                    value={this.props.deadline}\n                    onFinish={this.props.countdownFinished}\n                />\n                {<span>{\"Time remaining to transfer \"}\n                    <Tag color={\"green\"}>{this.props.amount}</Tag>\n                    {\"to \"}\n                    <Tag color={\"magenta\"}>{this.props.depositAddress}</Tag>\n                </span>}\n                <Tooltip\n                    trigger={'focus'}\n                    title={\"Enter your address\"}\n                    placement=\"topLeft\"\n                >\n                    {(this.props.allowAutoTransfer) &&\n                    (<Input\n                        style={{width: 200, display: \"inline\"}}\n                        size={\"small\"}\n                        {...this.props}\n                        onChange={this.onChangeFromAddress}\n                        placeholder=\"Your address\"\n                    />)}\n                </Tooltip>\n                <br/>\n                <br/>\n                {(this.props.allowAutoTransfer &&\n                    (<div>\n                        Transfer <Tag color={\"green\"}>{this.props.amount}</Tag>\n                        from <Tag color={\"purple\"}>{(this.state && this.state.fromAddress) || \"Your Address\"}</Tag>\n                        to <Tag color={\"magenta\"}>{this.props.depositAddress}</Tag>\n                        <Button\n                            type={\"danger\"}\n                            size={\"small\"}\n                            disabled={this.props.deadline <= 0 || (this.state && this.state.fromAddress.length <= 0)}\n                            onClick={this.props.handleAutoTransfer(this.state.fromAddress)}\n                        >Confirm Transfer</Button>\n                    </div>)) || (\n                    <Fragment>\n                        <Button type={\"primary\"} size={\"small\"} onClick={this.props.fundsTransferred}>\n                            I Transferred My Funds\n                            <Icon type={\"swap\"}/>\n                        </Button>\n                    </Fragment>\n                )}\n            </Fragment>\n        ));\n    }\n}",
    "import React, {Fragment} from \"react\";\nimport {Button} from 'antd';\nimport Form from \"antd/es/form\";\nimport Input from \"antd/es/input\";\nimport Icon from \"antd/es/icon\";\nimport {WrappedFormUtils} from \"antd/es/form/Form\";\nimport InputNumber from \"antd/es/input-number\";\nimport {Notify, Post} from \"../api/method.api\";\nimport {AxiosResponse} from \"axios\";\nimport {MixResponse} from \"../api/types\";\nimport Steps from \"antd/es/steps\";\nimport {AutoTransferInput} from \"../components/AutoTransferInput\";\n\ntype Props = {\n    form: WrappedFormUtils;\n}\n\ntype State = {\n    mixResponse?: MixResponse;\n    buttonClicked: boolean;\n    step: number;\n    stepStatus: \"wait\" | \"process\" | \"finish\" | \"error\" | undefined;\n    mixAmount: number;\n    deadline: number;\n}\n\n// Uncomment for auto transfer\nlet allowAutoTransfer = false;\nlet id = 0;\n\nclass PostMixForm extends React.Component<Props, State> {\n    componentDidMount() {\n        this.add();\n        this.setState({\n            buttonClicked: false,\n            deadline: 0,\n            step: 0,\n            stepStatus: \"process\",\n        })\n    }\n\n    restart = () => {\n        this.setState({\n            buttonClicked: false,\n            deadline: 0,\n            step: 0,\n            stepStatus: \"process\",\n        })\n    };\n\n    remove = (k: any) => {\n        const {form} = this.props;\n        const keys = form.getFieldValue('keys');\n        if (keys.length === 1) {\n            return;\n        }\n\n        form.setFieldsValue({\n            keys: keys.filter((key: any) => key !== k),\n        });\n    };\n\n    add = () => {\n        const {form} = this.props;\n        const keys = form.getFieldValue('keys');\n        const nextKeys = keys.concat(id++);\n        form.setFieldsValue({\n            keys: nextKeys,\n        });\n    };\n\n    countdownFinished = () => {\n        this.setState({\n            step: 1,\n            stepStatus: \"error\"\n        })\n\n    };\n\n    fundTransferred = () => {\n        this.setState({\n            step: 2,\n            stepStatus: \"process\"\n        })\n    };\n\n    handleAutoTransfer = (fromAddress: string) => {\n        return () => {\n            const payload = {\n                fromAddress,\n                toAddress: this.state.mixResponse!.depositAddress,\n                amount: this.state.mixAmount\n            };\n\n            Post(`api/jobcoin/transactions`, payload)\n                .then(response => {\n                    const axiosResponse = response as AxiosResponse;\n                    Notify(axiosResponse);\n                    this.props.form.resetFields();\n                    this.fundTransferred();\n                })\n                .catch(reason => {\n                    const axiosResponse = reason.response as AxiosResponse;\n                    console.log(axiosResponse);\n                    Notify(axiosResponse);\n                    this.setState({\n                        stepStatus: \"error\"\n                    })\n                });\n        }\n    };\n\n    handleSubmit = (e: { preventDefault: () => void; }) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const {keys, names} = values;\n                const destinations = keys.map((key: string | number) => names[key]);\n                const amount = values[\"amount\"];\n\n                const payload = {amount, destinations};\n\n                Post(`api/mixer/mix`, payload)\n                    .then(response => {\n                        const axiosResponse = response as AxiosResponse;\n                        Notify(axiosResponse);\n                        const mixResponse = axiosResponse.data as MixResponse;\n                        this.props.form.resetFields();\n                        this.setState({\n                            mixResponse,\n                            step: 1,\n                            mixAmount: amount,\n                            stepStatus: \"process\",\n                            // TODO: figure out deadline calculate\n                            deadline: Date.now() + 1000 * 60\n                        });\n                    })\n                    .catch(reason => {\n                        const axiosResponse = reason.response as AxiosResponse;\n                        console.log(axiosResponse);\n                        Notify(axiosResponse);\n                        this.setState({\n                            stepStatus: \"error\"\n                        })\n                    });\n            } else {\n                this.setState({\n                    buttonClicked: true\n                });\n            }\n        });\n    };\n\n    render() {\n        const {getFieldDecorator, getFieldValue} = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: {span: 24},\n                sm: {span: 4},\n            },\n            wrapperCol: {\n                xs: {span: 24},\n                sm: {span: 20},\n            },\n        };\n        const formItemLayoutWithOutLabel = {\n            wrapperCol: {\n                xs: {span: 24, offset: 0},\n                sm: {span: 20, offset: 4},\n            },\n        };\n        getFieldDecorator('keys', {initialValue: []});\n        const keys = getFieldValue('keys');\n        const formItems = keys.map((k: string | number | undefined, index: number) => (\n            <Form.Item\n                {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n                label={index === 0 ? 'Deposit Address' : ''}\n                required={true}\n                key={k}\n            >\n                {getFieldDecorator(`names[${k}]`, {\n                    validateTrigger: ['onChange', 'onBlur'],\n                    rules: [\n                        {\n                            required: true,\n                            whitespace: true,\n                            message: \"Fill in or delete deposit address!\",\n                        },\n                    ],\n                })(<Input placeholder=\"Address\" style={{width: '60%', marginRight: 8}}/>)}\n                {keys.length > 1 ? (\n                    <Icon\n                        className=\"dynamic-delete-button\"\n                        type=\"minus-circle-o\"\n                        onClick={() => this.remove(k)}\n                    />\n                ) : null}\n            </Form.Item>\n        ));\n\n        return (\n            <Fragment>\n                {this.state && this.state.step === 0 && (\n                    <Form onSubmit={this.handleSubmit}>\n                        {formItems}\n                        <Form.Item {...formItemLayoutWithOutLabel}>\n                            <Button type=\"dashed\" onClick={this.add} style={{width: '60%'}}>\n                                <Icon type=\"plus\"/> Add field\n                            </Button>\n                        </Form.Item>\n                        <Form.Item\n                            labelCol={{span: 4}}\n                            wrapperCol={{span: 12}}\n                            label={\"Amount\"}\n                            required={true}\n                        >\n                            {getFieldDecorator('amount', {\n                                validateTrigger: ['onChange', 'onBlur'],\n                                rules: [\n                                    {\n                                        required: true,\n                                        whitespace: true,\n                                        message: \"Amount is required!\",\n                                    },\n                                ],\n                            })(<InputNumber min={0} step={0.001} style={{width: \"100%\"}} placeholder=\"Amount\"/>)}\n                        </Form.Item>\n                        <Form.Item {...formItemLayoutWithOutLabel}>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Submit\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                )}\n                {this.state && (\n                    <Steps current={this.state.step} status={this.state.stepStatus} direction={\"vertical\"}>\n                        <Steps.Step title=\"Submit\" description=\"Ask the mixer mix your funds\"/>\n                        <Steps.Step title=\"Move Funds\" description={\n                            (this.state.step === 0 && \"Transfer from your wallet to the generated deposit address\") ||\n                            (this.state.step === 1 && ((this.state.stepStatus !== \"error\") ? (\n                                (<AutoTransferInput\n                                    amount={this.state.mixAmount}\n                                    depositAddress={this.state.mixResponse!.depositAddress}\n                                    countdownFinished={this.countdownFinished}\n                                    allowAutoTransfer={false}\n                                    handleAutoTransfer={this.handleAutoTransfer}\n                                    fundsTransferred={this.fundTransferred}\n                                    deadline={this.state.deadline}\n                                />)\n                            ) : (\"Mixer did not receive funds, mix abandoned\"))) ||\n                            (this.state.step === 2 && `Funds transferred to ${this.state.mixResponse!.depositAddress}`)\n                        }\n                        />\n                        <Steps.Step title=\"Wait Till Mixed\" description=\"The mixer will distribute your funds within 100 seconds.\"/>\n                    </Steps>\n\n                )}\n                {(this.state) && (this.state.step === 2 || this.state.stepStatus === \"error\") && (\n                    <Button type={\"primary\"} size={\"small\"} onClick={this.restart}>\n                        Restart <Icon type={\"redo\"}/>\n                    </Button>\n                )}\n            </Fragment>\n        );\n    }\n}\n\nexport const WrappedPostMixForm = Form.create({name: 'post_mix'})(PostMixForm);\n",
    "import React, {Component} from \"react\";\nimport {PageHeader} from 'antd';\nimport Tag from \"antd/es/tag\";\nimport {WrappedPostMixForm} from \"../forms/PostMixForm\";\n\ntype MixerProps = {}\n\ntype MixerState = {}\n\n\nexport class Mixer extends Component<MixerProps, MixerState> {\n\n    render() {\n        return (\n            <PageHeader\n                title=\"Mixer\"\n                subTitle=\"Submit a Mix\"\n                tags={[\n                    <Tag color=\"geekblue\">Mixer</Tag>,\n                ]}\n            >\n                <WrappedPostMixForm/>\n            </PageHeader>\n        );\n    }\n}",
    "import React from \"react\";\nimport {Transaction} from \"../api/types\";\nimport Table from \"antd/es/table\";\nimport {Tooltip} from \"antd\";\nimport Badge from \"antd/es/badge\";\nimport Tag from \"antd/es/tag\";\n\ntype Props = {\n    dataSource: Array<Transaction>,\n    highlightName?: string\n}\n\nfunction highlight(name: string, match: string) {\n    if (name === null) {\n        return (<span><Tag>Jobcoin</Tag></span>)\n    }\n    return (name === match) ?\n        (<span>\n            {name}\n            <Badge\n                color={\"cyan\"}\n                text={\"\"}\n                offset={[5, 0]}\n            />\n        </span>) : (<span>\n            {name}\n        </span>)\n}\n\nexport class TransactionTable extends React.Component<Props> {\n\n    render() {\n        const highlightName = (this.props.highlightName) ? (this.props.highlightName) : (\"\");\n\n        const columns = [\n            {\n                title: 'From',\n                dataIndex: 'fromAddress',\n                key: 'fromAddress',\n                width: '30%',\n                render: (address: string) => highlight(address, highlightName)\n            },\n            {\n                title: 'To',\n                dataIndex: 'toAddress',\n                key: 'toAddress',\n                width: '30%',\n                render: (address: string) => highlight(address, highlightName)\n            },\n            {\n                title: 'Amount',\n                dataIndex: 'amount',\n                key: 'amount',\n                width: '10%'\n            },\n            {\n                title: 'Date',\n                dataIndex: 'timestamp',\n                key: 'timestamp',\n                render: (timestamp: string) => (<Tooltip title={timestamp}><span>Hover</span></Tooltip>)\n            },\n        ];\n\n        return (\n            <Table\n                bordered={false}\n                dataSource={this.props.dataSource}\n                columns={columns}\n                pagination={{pageSize: 5}}\n            />\n        )\n    }\n}",
    "import React, {Fragment} from \"react\";\nimport {Button} from 'antd';\nimport Form from \"antd/es/form\";\nimport Input from \"antd/es/input\";\nimport Icon from \"antd/es/icon\";\nimport {Get, Notify} from \"../api/method.api\";\nimport {AddressInfo} from \"../api/types\";\nimport {AxiosResponse} from \"axios\";\nimport {Statistic} from \"antd/es\";\nimport {Col, Row} from \"antd/es/grid\";\nimport Collapse from \"antd/es/collapse\";\nimport {TransactionTable} from \"../components/TransactionTable\";\n\nfunction hasErrors(fieldsError: any) {\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\ntype Props = {\n    form: any,\n\n}\n\ntype State = {\n    addressInfo?: AddressInfo;\n    address?: string;\n}\n\nclass GetAddressInfoForm extends React.Component<Props, State> {\n    componentDidMount() {\n        this.props.form.validateFields();\n        this.state = {}\n    };\n\n\n    handleSubmit = (e: any) => {\n        e.preventDefault();\n        this.props.form.validateFields((err: any, values: any) => {\n            if (!err) {\n                const address = values['address'];\n                Get(`api/jobcoin/addresses/${address}`)\n                    .then(response => {\n                        const axiosResponse = response as AxiosResponse;\n                        Notify(axiosResponse, \"Retrieved Address Info\");\n                        const addressInfo = axiosResponse.data as AddressInfo;\n                        this.setState({\n                            addressInfo: addressInfo,\n                            address: address\n                        });\n                    });\n            }\n        });\n    };\n\n    render() {\n        const {getFieldDecorator, getFieldsError, getFieldError, isFieldTouched} = this.props.form;\n\n        const addressError = isFieldTouched('address') && getFieldError('address');\n\n        return (\n            <Fragment>\n                <Form layout=\"horizontal\" onSubmit={this.handleSubmit}>\n                    <Form.Item\n                        labelCol={{span: 4}}\n                        wrapperCol={{span: 12}}\n                        label={\"Address\"}\n                        validateStatus={addressError ? 'error' : ''} help={addressError || ''}\n                    >\n                        {getFieldDecorator('address', {\n                            rules: [{required: true, message: 'Address required!'}],\n                        })(\n                            <Input prefix={<Icon type=\"wallet\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                   placeholder=\"Address\"/>\n                        )}\n                    </Form.Item>\n                    <Form.Item\n                        wrapperCol={{span: 12, offset: 4}}\n\n                    >\n                        <Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>\n                            Get Info\n                        </Button>\n                    </Form.Item>\n                </Form>\n                {this.state && this.state.addressInfo &&\n                <Fragment>\n                    <br/>\n                    <Row gutter={16}>\n                        <Col span={18}>\n                            <Statistic\n                                title=\"Balance\"\n                                value={this.state.addressInfo.balance}\n                                precision={6}\n                                prefix={\n                                    <Icon type=\"dollar\" theme=\"twoTone\"/>\n                                }\n                            />\n                        </Col>\n                        <Col span={6}>\n                            <Statistic\n                                title=\"Transactions\"\n                                value={this.state.addressInfo.transactions.length}\n                            />\n                        </Col>\n                    </Row>\n                    <br/>\n                    <Collapse bordered={false} defaultActiveKey={[]}>\n                        <Collapse.Panel header=\"Transactions\" key=\"1\">\n                            <TransactionTable\n                                highlightName={this.state.address}\n                                dataSource={this.state.addressInfo.transactions}\n                            />\n                        </Collapse.Panel>\n                    </Collapse>\n                </Fragment>\n                }\n            </Fragment>\n        );\n    }\n}\n\nexport const WrappedGetAddressInfoForm = Form.create({name: 'get_address_info'})(GetAddressInfoForm);\n",
    "import React, {Fragment} from \"react\";\nimport Form from \"antd/es/form\";\nimport {Get} from \"../api/method.api\";\nimport {Transaction} from \"../api/types\";\nimport {AxiosResponse} from \"axios\";\nimport {TransactionTable} from \"../components/TransactionTable\";\n\ntype Props = {\n    form: any,\n\n}\n\ntype State = {\n    transactions?: Array<Transaction>;\n}\n\nclass GetAllTransactionsForm extends React.Component<Props, State> {\n    componentDidMount() {\n        this.props.form.validateFields();\n        Get(`api/jobcoin/transactions`)\n            .then(response => {\n                const axiosResponse = response as AxiosResponse;\n                const transactions = axiosResponse.data as Array<Transaction>;\n                this.setState({\n                    transactions: transactions\n                });\n            });\n    };\n\n    render() {\n        return (\n            <Fragment>\n                {this.state && this.state.transactions &&\n                <TransactionTable dataSource={this.state.transactions}/>\n                }\n            </Fragment>\n        );\n    }\n}\n\nexport const WrappedGetAllTransactionsForm = Form.create({name: 'get_all_tranasctions'})(GetAllTransactionsForm);\n",
    "import React, {Fragment} from \"react\";\nimport {Button} from 'antd';\nimport Form from \"antd/es/form\";\nimport Input from \"antd/es/input\";\nimport Icon from \"antd/es/icon\";\nimport {Notify, Post} from \"../api/method.api\";\nimport {AxiosResponse} from \"axios\";\nimport InputNumber from \"antd/es/input-number\";\n\nfunction hasErrors(fieldsError: any) {\n    return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\ntype Props = {\n    form: any,\n}\n\ntype State = {}\n\nclass PostTransactionForm extends React.Component<Props, State> {\n    componentDidMount() {\n        this.props.form.validateFields();\n    };\n\n    handleSubmit = (e: any) => {\n        e.preventDefault();\n        this.props.form.validateFields((err: any, values: any) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                const fromAddress = values['fromAddress'];\n                const toAddress = values['toAddress'];\n                const amount = values['amount'];\n                const payload = {fromAddress, toAddress, amount};\n\n                Post(`api/jobcoin/transactions`, payload)\n                    .then(response => {\n                        const axiosResponse = response as AxiosResponse;\n                        Notify(axiosResponse);\n                        this.props.form.resetFields();\n                    })\n                    .catch(reason => {\n                        const axiosResponse = reason.response as AxiosResponse;\n                        console.log(axiosResponse);\n                        Notify(axiosResponse);\n                    });\n            }\n        });\n    };\n\n    render() {\n        const {getFieldDecorator, getFieldsError, getFieldError, isFieldTouched} = this.props.form;\n\n        const fromError = isFieldTouched('fromAddress') && getFieldError('fromAddress');\n        const toError = isFieldTouched('toAddress') && getFieldError('toAddress');\n        const amountError = isFieldTouched('amount') && getFieldError('amount');\n\n        return (\n            <Fragment>\n                <Form onSubmit={this.handleSubmit} layout={\"horizontal\"}>\n                    <Form.Item\n                        labelCol={{span: 4}}\n                        wrapperCol={{span: 12}}\n                        label={\"From\"}\n                        validateStatus={fromError ? 'error' : ''} help={fromError || ''}\n                    >\n                        {getFieldDecorator('fromAddress', {\n                            rules: [{required: true, message: 'From Address Required'}],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"swap-left\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                placeholder=\"From Address\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item\n                        labelCol={{span: 4}}\n                        wrapperCol={{span: 12}}\n                        label={\"To\"}\n                        validateStatus={toError ? 'error' : ''} help={toError || ''}\n                    >\n                        {getFieldDecorator('toAddress', {\n                            rules: [{required: true, message: 'To Address Required'}],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"swap-right\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                placeholder=\"To Address\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item\n                        labelCol={{span: 4}}\n                        wrapperCol={{span: 12}}\n                        label={\"Amount\"}\n                        validateStatus={amountError ? 'error' : ''} help={amountError || ''}\n                    >\n                        {getFieldDecorator('amount', {\n                            rules: [{required: true, message: 'Amount Required!'}],\n                        })(\n                            <InputNumber\n                                min={0}\n                                step={0.001}\n                                style={{width: \"100%\"}}\n                                placeholder=\"Amount\"/>,\n                        )}\n\n                    </Form.Item>\n                    <Form.Item\n                        wrapperCol={{span: 12, offset: 4}}\n                    >\n                        <Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>\n                            Send\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Fragment>\n        );\n    }\n}\n\nexport const WrappedPostTransactionForm = Form.create({name: 'post_mix'})(PostTransactionForm);\n",
    "import React from \"react\";\nimport {PageHeader, Tabs, Tag} from 'antd';\nimport {WrappedGetAddressInfoForm} from \"../forms/GetAddressInfoForm\";\nimport {WrappedGetAllTransactionsForm} from \"../forms/GetAllTransactionsForm\";\nimport {WrappedPostTransactionForm} from \"../forms/PostTransactionForm\";\n\nconst {TabPane} = Tabs;\n\ntype JobcoinProps = {}\n\ntype JobcoinState = {\n    activePane: string\n}\n\nexport class Jobcoin extends React.Component<JobcoinProps, JobcoinState> {\n    componentDidMount() {\n        this.state = {\n            activePane: \"info\"\n        }\n    }\n\n    render() {\n\n        return (\n            <PageHeader\n                title=\"Jobcoin\"\n                subTitle=\"Send and Check Jobcoins\"\n                tags={[\n                    <Tag key=\"1\" color=\"green\">Jobcoin API</Tag>,\n                    <Tag key=\"2\" color=\"magenta\">Passthrough</Tag>,\n                ]}\n            >\n                <Tabs defaultActiveKey=\"1\" onChange={activePane => this.setState({activePane})}>\n                    <TabPane tab=\"New Transaction\" key=\"new\"/>\n                    <TabPane tab=\"Address Info\" key=\"info\"/>\n                    <TabPane tab=\"All Transactions\" key=\"all\"/>\n                </Tabs>\n                {(this.state) ?\n                    (\n                        (this.state.activePane === \"info\" && <WrappedGetAddressInfoForm/>) ||\n                        (this.state.activePane === \"all\" && <WrappedGetAllTransactionsForm/>) ||\n                        (this.state.activePane === \"new\" && <WrappedPostTransactionForm/>)\n                    ) : (\n                        <WrappedPostTransactionForm/>\n                    )\n                }\n            </PageHeader>\n        );\n    }\n}",
    "import React, {Component} from 'react';\nimport './App.css';\nimport Col from \"antd/es/grid/col\";\nimport Row from \"antd/es/grid/row\";\nimport {Layout} from \"antd\";\nimport Menu from \"antd/es/menu\";\nimport {Mixer} from \"./components/Mixer\";\nimport {Jobcoin} from \"./components/Jobcoin\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Layout className=\"layout\">\n                    <Layout.Header style={{zIndex: 1, width: '100%'}}>\n                        <div className=\"logo\"/>\n                        <Menu\n                            theme=\"dark\"\n                            mode=\"horizontal\"\n                            defaultSelectedKeys={['1']}\n                            style={{lineHeight: '64px'}}\n                        >\n                            <Menu.Item key=\"1\">Jobcoin Mixer</Menu.Item>\n                        </Menu>\n                    </Layout.Header>\n                    <Layout.Content style={{padding: '50px 50px 0px 50px'}}>\n                        <Row gutter={16}>\n                            <Col span={12}>\n                                <Jobcoin\n                                />\n                            </Col>\n                            <Col span={12}>\n                                <Mixer\n                                />\n                            </Col>\n                        </Row>\n                    </Layout.Content>\n                    <Layout.Footer style={{textAlign: 'center'}}>Raayan Pillai © 2019</Layout.Footer>\n                </Layout>\n            </div>\n        );\n    }\n}\n\nexport default App;",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
  ],
  "sourceRoot": ""
}